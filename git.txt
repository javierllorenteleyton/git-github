-- config
git config --global user.email 'jllorente.leyton@gmail.com'
git config --global user.name 'javier llorente'
git status
git log


-- New project
Git init
 git remote add origin "https://github.com/javierllorenteleyton/git-github.git"
 git pull origin <branch> -- ex. git pull origin master 

 -- modify
 ----  Local
 git add .
 git commit -m 'Firt commit'
 
 ---- remote
 git push origin <branch> ex. master
 
---- Branches

Master:
git brach --> see branch, active brach
git branch develop --> create branch
git checout develop --> cambiar de branch

--- Merge
go to dest branch --> git checkout <destBranch>
merge ---> git merge <sourceBranch> 
---revert commit

git reset HEAD <file> --> stage to working
git reset HEAD~ --> revert last commit

----------- add project to git (Local)
http://www.initializr.com/ get a init project
git init
git status
git add .
git commir -m 'init commit'
git commir -am 'init commit'

----------- add project to git (GitHub)
https://github.com/scm-ninja fork

---- backing out change
git checkout -- <file>

--- delete file git 
git rm <file>
git commit -m 'delete'
git reset HEAD <file> -- reset commit
git checkout -- <file> -- reset delete

--- rename move
git mv <file_current_name> <new_name>
git mv filr_name directory_name

--- history
git log
git log -abbrev-log
git log --oneline - - graph - - decorate
git log --since="2 days ago"
git log -- <file>
git show <commit Id>

--- git alias
git config --global alias.<short> "Long cmm"

--- ignore files.
.gitignore
   <file>
   *.txt
   dir/

---------- editor to commit
git config --global core.editor "subl -n -w"
git config --global core.editor "\"C:\Program Files (x86)\Notepad++\notepad++.exe\""

---- Compare 
work area to stagin area --> git diff  / git diff <file> 
work area to repo --> git diff HEAD <file> last commit
stagin to repo -->git diff --staged HEAD 
compre commits --> git diff <commitida> <commitid2> --> git log --oneline to see commits
                     git diff HEAD HEAD^
					 
--- branches
git branch -a
git branch <new>

--- rebase
having a two branchces master and feature_branch
---> git merge : to incorporate the changes.
		git checkout feature_branch
		git merge master
		
    create new commit and log tie both.	
	history too complex.	
	
---> git rebase
		git checkout feature_branch            |-- yyy --- yyyy --- yyyy (feature)
		git rebase master                xxxx --- xxxxx (Master)------|
		
		on top de master branch put feature.   xxx --- xxx --xxx (Master) --- yyyy --- yyy- yyyy (feature)
		
		


